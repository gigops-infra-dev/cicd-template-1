---
name: Merge
on:
  pull_request:
    branches:
      - main
      - staging
    types: [closed]

concurrency: ${{ github.base_ref }}

permissions: write-all
env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  TERRAFORM_BASE_DIR: terraform

jobs:   
  check-targets:
    if: github.event.pull_request.merged
    runs-on: ubuntu-latest
    outputs:
      init_url: ${{ steps.check.outputs.init_url }}
      plan_url: ${{ steps.check.outputs.plan_url }}
      apply_url: ${{ steps.check.outputs.apply_url }}
      target_dir: ${{ steps.check.outputs.target_dir }}
    steps: 
      - uses: actions/checkout@v3

      - id: check
        uses: ./.github/actions/read-pull-requests

  apply:
    if: ${{ needs.check-targets.outputs.target_dir != '' }}
    runs-on: ubuntu-latest
    needs: check-targets
    steps:
      - id: generate_token
        uses: ezqy/ghaction/generate-github-app-token@v0.0.1
        with:
          app_id: ${{ secrets.app_id }}
          installation_id: ${{ secrets.installation_id }}
          private_key: ${{ secrets.private_key }}
      - uses: actions/checkout@v3
        with:
          token: ${{ steps.generate_token.outputs.token }}
      - uses: docker/setup-buildx-action@v1
      - id: setup-envs
        uses: ./.github/actions/setup-envs
        with:
          base_ref: ${{ github.base_ref }}
          head_ref: ${{ github.head_ref }}
      - uses: ./.github/actions/setup-terraform
        with:
          working_directory: ./${{env.TERRAFORM_BASE_DIR}}/${{ steps.setup-envs.outputs.ghaction_target }}
      - uses: ./.github/actions/setup-aws-credentials
        with:
          aws_role_arn: ${{ steps.setup-envs.outputs.aws_role_arn }}
          aws_profile: ${{ steps.setup-envs.outputs.aws_profile }}
          aws_region: ap-northeast-1
          ssh_key: ${{ secrets.RSA }}

      - id: init
        uses: ./.github/actions/terragrunt-init
        with:
          aws_profile: ${{ steps.setup-envs.outputs.aws_profile }}
          working_directory: ./${{ env.TERRAFORM_BASE_DIR }}/${{ steps.setup-envs.outputs.ghaction_target }}
          target_dir: ${{ needs.check-targets.outputs.target_dir }}
          git_ssh_command: ssh -i /tmp/id_rsa -o UserKnownHostsFile=./known_hosts
          tf_workspace: ${{ steps.setup-envs.outputs.tf_workspace }}
          init_url: ${{ needs.check-targets.outputs.init_url }}
          plan_url: ${{ needs.check-targets.outputs.plan_url }}
          apply_url: ${{ needs.check-targets.outputs.apply_url }}
          is_write_pr: false

      - id: apply
        if: ${{ steps.init.outcome == 'success' }} 
        uses: ./.github/actions/terragrunt-apply
        with:
          aws_profile: ${{ steps.setup-envs.outputs.aws_profile }}
          target_dir: ${{ needs.check-targets.outputs.target_dir }}
          git_ssh_command: ssh -i /tmp/id_rsa -o UserKnownHostsFile=./known_hosts
          tf_workspace: ${{ steps.setup-envs.outputs.tf_workspace }}
          working_directory: ./${{ env.TERRAFORM_BASE_DIR }}/${{ steps.setup-envs.outputs.ghaction_target }}
          apply_url: ${{ needs.check-targets.outputs.apply_url }}
        
  create-pr:
    runs-on: ubuntu-latest
    needs: check-targets
    if: ${{ (needs.check-targets.outputs.target_dir == '' || needs.check-targets.outputs.target_dir == '[]') && github.base_ref  == 'staging' }}
    env:
      BASE_REF: main
      HEAD_REF: staging
    steps:
      - id: generate_token
        uses: ezqy/ghaction/generate-github-app-token@v0.0.1
        with:
          app_id: ${{ secrets.app_id }}
          installation_id: ${{ secrets.installation_id }}
          private_key: ${{ secrets.private_key }}

      - uses: actions/checkout@v3      
        with:
          ref: ${{ env.HEAD_REF }}
          fetch-depth: 0
          token: ${{ steps.generate_token.outputs.token }}

      - uses: ./.github/actions/create-pr
        with:
          base_ref: ${{ env.BASE_REF }}
          head_ref: ${{ env.HEAD_REF }}
          github_action_token: ${{ steps.generate_token.outputs.token }}

  split-branch:
    runs-on: ubuntu-latest
    needs: [check-targets,apply]
    if: ${{ success() && needs.check-targets.outputs.target_dir != ''  && github.base_ref  == 'staging' }}
    env:
      BASE_REF: main
      HEAD_REF: staging
    steps:
      - id: generate_token
        uses: ezqy/ghaction/generate-github-app-token@v0.0.1
        with:
          app_id: ${{ secrets.app_id }}
          installation_id: ${{ secrets.installation_id }}
          private_key: ${{ secrets.private_key }}
          
      - run: |
          target=$(echo ${GITHUB_HEAD_REF} | awk -F "_" '{ print $NF }')
          echo "TARGET_DIR=$target" >> $GITHUB_ENV

      - uses: actions/checkout@v3
        with:
          token: ${{ steps.generate_token.outputs.token }}
          ref: ${{ env.HEAD_REF }}
          fetch-depth: 0

      - uses: ./.github/actions/split-branch
        continue-on-error: true
        with:
          base_ref: ${{ env.BASE_REF }}
          head_ref: ${{ env.HEAD_REF }}
          target_dir: ${{ env.TARGET_DIR }}
          github_action_token: ${{ steps.generate_token.outputs.token }}

  clean-branch:
    runs-on: ubuntu-latest
    if: ${{ github.event.pull_request.merged && github.head_ref != 'staging' && github.head_ref != 'main' }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - run: git fetch --all
      - id: check_branch_exists
        continue-on-error: true
        run: |
          if [ -n "$(git branch -a --format="%(refname:short)" | grep -e ^origin/${HEAD_REF})" ]; then
            exit 0
          else
            exit 1
          fi
        env:
          HEAD_REF: ${{ github.head_red }}
      - if: ${{ steps.check_branch_exists.outcome == 'success' }}
        run: git push origin --delete ${{ github.head_ref }}

  synchronize:
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged
    outputs:
      branches: ${{ steps.check_child_branches.outputs.branches }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - run: git fetch --all
      - id: check_child_branches
        run: |
          set +e
          set -x
          target=$(echo ${HEAD_REF} | awk -F "_" '{ print $NF }')
          result=$(git branch -a --format="%(refname:short)" | grep -E ^origin/pr/${BASE_REF}/.*_${target} | cut -d '/' -f 2,3,4 | grep -v -x ${HEAD_REF} |  awk '{print "\"" $1 "\""}')
          tmp=$(echo "[${result//$'\n'/,}]" | jq -c )
          echo "::set-output name=branches::$tmp"
        env:
          BASE_REF: ${{ github.base_ref }}
          HEAD_REF: ${{ github.head_ref }}

  reverse_merge:
    needs: synchronize
    runs-on: ubuntu-latest
    if: ${{ needs.synchronize.outputs.branches != '[]' && needs.synchronize.outputs.branches != '' }}
    strategy:
      fail-fast: false 
      matrix:
        branch: ${{ fromJson(needs.synchronize.outputs.branches) }}
    steps:
      - if: ${{ matrix.branch != github.head_ref }}
        id: generate_token
        uses: ezqy/ghaction/generate-github-app-token@v0.0.1
        with:
          app_id: ${{ secrets.app_id }}
          installation_id: ${{ secrets.installation_id }}
          private_key: ${{ secrets.private_key }}
      - if: ${{ matrix.branch != github.head_ref }}
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: ${{ matrix.branch }}
          token: ${{ steps.generate_token.outputs.token }}
      - if: ${{ matrix.branch != github.head_ref }}
        run: | 
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git fetch --all
      - if: ${{ matrix.branch != github.head_ref }}
        run: | 
          set -x
          git merge origin/${BASE_REF}
          git push origin HEAD
        env:
          BASE_REF: ${{ github.base_ref }}
          HEAD_REF: ${{ matrix.branch }}