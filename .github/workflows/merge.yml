---
name: Merge
on:
  pull_request:
    branches:
      - main
      - staging
    types: [closed]

permissions: write-all
env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  TERRAFORM_BASE_DIR: terraform

jobs:
  check-targets:
    runs-on: ubuntu-latest
    outputs:
      apply-url: ${{ steps.check.outputs.apply_url }}
      target-dir: ${{ steps.check.outputs.target_dir }}
    steps: 
      - id: check
        run: |
          json=$(gh api --method GET -H "Accept: application/vnd.github.v3+json" /repos/${GITHUB_REPOSITORY}/issues/${{ github.event.pull_request.number }}/comments)
          length=$(echo $json | jq length)

          for i in $( seq 0 $(($length - 1)) ); do
            user=$(echo $json | jq -r .[$i].user.login)
            body=$(echo $json | jq -r .[$i].body | tail -n 1)
            target=$(echo $json | jq -r .[$i].body | tail -n 2 | head -n 1)
            if [ "$user" == "github-actions[bot]" ] && [[ "$body" =~ apply ]]; then
              url=$(echo $json | jq -r .[$i].url)
              repo=$(echo ${url#https://api.github.com})
              echo "::set-output name=apply_url::$repo"
              target_dir=$(echo ${target} | sed -r 's/^<\!-- TARGET_DIR: (.*) -->$/\1/')
              echo "::set-output name=target_dir::$target_dir"
              break
            fi
          done

  apply:
    runs-on: ubuntu-latest
    needs: check-targets
    if: ${{ needs.check-targets.outputs.target-dir != '' }}
    steps:
      - uses: actions/checkout@v3
        with:
          token: ${{ secrets.GH_ACTION_TOKEN }}
      - uses: rhythmictech/actions-setup-tfenv@v0.0.2
      - name: setup tgenv
        run: |
          git clone https://github.com/cunymatthieu/tgenv.git ~/.tgenv
          ln -s ~/.tgenv/bin/* /usr/local/bin

      - name: read-env
        run: |
          target=$(echo ${GITHUB_HEAD_REF} | awk -F "_" '{ print $NF }')
          echo $target
          jq -c .targets[] actions.json | while read line; do
            ghaction_target=$(echo $line | jq -r .ghaction_target)
            echo $ghaction_target
            if [ "${ghaction_target}" == "${target}" ]; then
              aws_profile=$(echo $line | jq -r .${GITHUB_BASE_REF}.aws_profile)
              aws_role_arn=$(echo $line | jq -r .${GITHUB_BASE_REF}.aws_role_arn)
              tf_workspace=$(echo $line | jq -r .${GITHUB_BASE_REF}.tf_workspace)
              echo "GHACTION_TARGET=$ghaction_target" >> $GITHUB_ENV
              echo "AWS_PROFILE=$aws_profile" >> $GITHUB_ENV
              echo "AWS_ROLE_ARN=$aws_role_arn" >> $GITHUB_ENV
              echo "TF_WORKSPACE=$tf_workspace" >> $GITHUB_ENV
              echo $GITHUB_ENV
              break
            fi
          done

      - uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{env.AWS_ROLE_ARN}}
          aws-region: ap-northeast-1
      - run: |
          aws configure set region ${AWS_REGION} --profile ${AWS_PROFILE}
          aws configure set aws_access_key_id ${AWS_ACCESS_KEY_ID} --profile ${AWS_PROFILE}
          aws configure set aws_secret_access_key ${AWS_SECRET_ACCESS_KEY} --profile ${AWS_PROFILE}
          aws configure set aws_session_token ${AWS_SESSION_TOKEN} --profile ${AWS_PROFILE}

      - run: |
          tfenv install
          tgenv install
        working-directory: ./${{env.TERRAFORM_BASE_DIR}}/${{env.GHACTION_TARGET}}

      - run: |
          echo "${{ secrets.RSA }}" > ./id_rsa
          echo $(ssh-keyscan -t rsa github.com)  > known_hosts
          chmod 600 id_rsa known_hosts
        working-directory: /tmp

      - id: init
        run: | 
          ./deploy-terragrunt.sh init "${TARGET_DIR}" 
        continue-on-error: true
        working-directory: ./${{env.TERRAFORM_BASE_DIR}}/${{env.GHACTION_TARGET}}
        env:
          AWS_PROFILE: ${{ env.AWS_PROFILE }}
          TARGET_DIR: ${{ needs.check-targets.outputs.target-dir }}
          GIT_SSH_COMMAND: ssh -i /tmp/id_rsa -o UserKnownHostsFile=./known_hosts
          TF_WORKSPACE: ${{ env.TF_WORKSPACE }}

      - id: apply
        if: ${{ steps.init.outcome == 'success' }} 
        run:  ./deploy-terragrunt.sh apply "${TARGET_DIR}" 1> stdout.log 2> stderr.log
        continue-on-error: true
        working-directory: ./${{env.TERRAFORM_BASE_DIR}}/${{env.GHACTION_TARGET}}
        env:
          AWS_PROFILE: ${{ env.AWS_PROFILE }}
          TARGET_DIR: ${{ needs.check-targets.outputs.target-dir }}
          GIT_SSH_COMMAND: ssh -i /tmp/id_rsa -o UserKnownHostsFile=./known_hosts
          TF_WORKSPACE: ${{ env.TF_WORKSPACE }}

      - if: ${{ steps.init.outcome == 'success' }} 
        run: |
          if [ "${{ steps.apply.outcome }}" == "success" ]; then
            echo "# :heavy_check_mark:Terragrunt apply" > APPLY.md
            echo '```hcl' >> APPLY.md
            cat stderr.log | sed -n -e '/^Group/p' -e '/- Module/p' >> APPLY.md
            echo "" >> APPLY.md
            cat stdout.log | sed -n -e '/^Apply/p' >> APPLY.md
            echo '```' >> APPLY.md
            echo "<details>" >> APPLY.md
            echo "<summary>Details</summary>" >> APPLY.md
            echo -e "\n" >> APPLY.md
            echo '```hcl' >> APPLY.md
            cat stderr.log | sed -n -e '/^Group/p' -e '/- Module/p' >> APPLY.md
            echo "" >> APPLY.md
            cat stdout.log | sed -r "s/\x1B\[([0-9]{1,2}(;[0-9]{1,2})?)?[mGK]//g" >> APPLY.md
            echo '```' >> APPLY.md
            echo "</details>" >> APPLY.md

            echo -n "<!-- apply -->" >> APPLY.md
          else
            echo "# :bangbang:Terragrunt apply" > APPLY.md
            echo '```hcl' >> APPLY.md
            cat stderr.log | sed -r "s/\x1B\[([0-9]{1,2}(;[0-9]{1,2})?)?[mGK]//g" | sed -n -e '/^Error/,+4p' >> APPLY.md
            echo '```' >> APPLY.md
            echo "<details>" >> APPLY.md
            echo "<summary>Details</summary>" >> APPLY.md
            echo -e "\n" >> APPLY.md
            echo '```hcl' >> APPLY.md
            cat stderr.log | sed -r "s/\x1B\[([0-9]{1,2}(;[0-9]{1,2})?)?[mGK]//g" >> APPLY.md
            echo '```' >> APPLY.md
            echo "</details>" >> APPLY.md
            echo -n "<!-- apply -->" >> APPLY.md
          fi

          if [ -n "${{ needs.check-targets.outputs.apply-url}}" ]; then
            gh api --method PATCH -H "Accept: application/vnd.github+json" ${{ needs.check-targets.outputs.apply-url }} -f body="$(cat ./APPLY.md)"
          else
            gh pr comment ${PR_NUMBER} -F ./APPLY.md
          fi

        working-directory: ./${{env.TERRAFORM_BASE_DIR}}/${{env.GHACTION_TARGET}}
        env:
          AWS_PROFILE: ${{ env.AWS_PROFILE }}
          PR_NUMBER: ${{ github.event.pull_request.number }}

      - if: ${{ steps.init.outcome == 'failure' }} 
        run: |
          gh api --method PATCH -H "Accept: application/vnd.github+json" ${{ needs.check-targets.outputs.apply-url }} -f body=""
          exit 1

      - if: ${{ steps.apply.outcome == 'failure' }}
        run: |
          result=$(gh issue create --title "Error terragrunt apply" -F ./APPLY.md --label "bug" --label "base:${BASE_REF}" --label "head:${HEAD_REF}")
          issue_num=$(echo $result | awk -F "/" '{ print $NF }')
          exit 1
        working-directory: ./${{env.TERRAFORM_BASE_DIR}}/${{env.GHACTION_TARGET}}
        env:
          PR_NUMBER: ${{ github.event.pull_request.number }}
          BASE_REF: ${{ github.base_ref }}
          HEAD_REF: ${{ github.head_ref }}
        
  create-pr:
    runs-on: ubuntu-latest
    needs: check-targets
    env:
      BASE_REF: main
      HEAD_REF: staging
    if: ${{ needs.check-targets.outputs.target-dir == '' && github.base_ref  == 'staging' }}
    steps:
      - uses: actions/checkout@v3      
        with:
          fetch-depth: 0
          token: ${{ secrets.GH_ACTION_TOKEN }}
          
      - run: | 
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git fetch origin

      - id: split_branch
        continue-on-error: true
        run: |
          set +e
          if [ -n "$(git branch -a --format="%(refname:short)" | grep -e ^origin/pr/${BASE_REF}/${HEAD_REF#feature/}_${BRANCH_SUFFIX})" ]; then
            echo "branch exists"
            if [ -n "$(git diff origin/pr/${BASE_REF}/${HEAD_REF#feature/}_${BRANCH_SUFFIX} --name-only | grep -v -e ^${TERRAFORM_BASE_DIR})" ];then
              git checkout pr/${BASE_REF}/${HEAD_REF#feature/}_${BRANCH_SUFFIX}
              git merge -Xtheirs ${HEAD_REF}
              git add --all
              git reset ./${TERRAFORM_BASE_DIR}
              git commit -m "Merge pr/${BASE_REF}/${HEAD_REF#feature/}_${BRANCH_SUFFIX}"
              git push -f origin HEAD
              is_commit=true
            else
              echo "No commits"
              is_commit=false
            fi
          else
            echo "branch doesnt exist"
            if [ -n "$(git diff origin/${BASE_REF} --name-only | grep -v -e ^${TERRAFORM_BASE_DIR})" ]; then
              git checkout -b pr/${BASE_REF}/${HEAD_REF#feature/}_${BRANCH_SUFFIX} origin/${BASE_REF}
              git merge -Xtheirs ${HEAD_REF}
              git add --all
              git reset ./${TERRAFORM_BASE_DIR}
              git commit -m "Split branch pr/${BASE_REF}/${HEAD_REF#feature/}_${BRANCH_SUFFIX}"
              git push origin HEAD
              is_commit=true
            else
              echo "No commits"
              is_commit=false
            fi
          fi
           echo "::set-output name=commit::$is_commit"
        env:
          GITHUB_TOKEN: ${{ secrets.GH_ACTION_TOKEN }}
          BRANCH_SUFFIX: tmp

      - if: ${{ steps.split_branch.outcome == 'success' && steps.split_branch.outputs.commit == 'true' }}
        run: |
          if [ ! -n "$(gh pr list --base ${BASE_REF} --head pr/${BASE_REF}/${HEAD_REF#feature/}_${BRANCH_SUFFIX} )" ]; then
            gh pr create --base ${BASE_REF} --head pr/${BASE_REF}/${HEAD_REF#feature/}_${BRANCH_SUFFIX} --title "pr/${BASE_REF}/${HEAD_REF#feature/}_${BRANCH_SUFFIX} -> ${BASE_REF}" --body ""
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GH_ACTION_TOKEN }}
          BRANCH_SUFFIX: tmp

  split-branch:
    runs-on: ubuntu-latest
    needs: [check-targets,apply]
    if: ${{ success() && github.base_ref  == 'staging' }}
    env:
      BASE_REF: main
      HEAD_REF: staging
    steps:
      - run: |
          target=$(echo ${GITHUB_HEAD_REF} | awk -F "_" '{ print $NF }')
          echo "TARGET_DIR=$target" >> $GITHUB_ENV
        env:
          GITHUB_TOKEN: ${{ secrets.GH_ACTION_TOKEN }}
      - uses: actions/checkout@v3
        with:
          token: ${{ secrets.GH_ACTION_TOKEN }}
          ref: ${{ env.HEAD_REF}}
          fetch-depth: 0
      - run: | 
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git fetch --all

      - id: split_branch
        continue-on-error: true
        run: |
          set +e
          if [ -n "$(git branch -a --format="%(refname:short)" | grep -e ^origin/pr/${BASE_REF}/${HEAD_REF#feature/}_${TARGET_DIR})" ]; then
            echo "branch exists"
            if [ -n "$(git diff origin/pr/${BASE_REF}/${HEAD_REF#feature/}_${TARGET_DIR} --name-only | grep -e ^${TERRAFORM_BASE_DIR}/${TARGET_DIR})" ];then
              git checkout pr/${BASE_REF}/${HEAD_REF#feature/}_${TARGET_DIR}
              git merge -Xtheirs ${HEAD_REF}
              git add --all
              git reset ./${TERRAFORM_BASE_DIR}
              git add ./${TERRAFORM_BASE_DIR}/${TARGET_DIR}
              git commit -m "Merge pr/${BASE_REF}/${HEAD_REF#feature/}_${TARGET_DIR}"
              git push -f origin HEAD
            fi
          else
            echo "branch doesnt exist"
            if [ -n "$(git diff origin/${BASE_REF} --name-only | grep -e ^${TERRAFORM_BASE_DIR}/${TARGET_DIR})" ]; then
              git checkout -b pr/${BASE_REF}/${HEAD_REF#feature/}_${TARGET_DIR} origin/${BASE_REF}
              git merge -Xtheirs ${HEAD_REF}
              git add --all
              git reset ./${TERRAFORM_BASE_DIR}
              git add ./${TERRAFORM_BASE_DIR}/${TARGET_DIR}
              git commit -m "Split branch pr/${BASE_REF}/${HEAD_REF#feature/}_${TARGET_DIR}"
              git push origin HEAD
            fi
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GH_ACTION_TOKEN }}

      - if: ${{ steps.split_branch.outcome == 'success' }}
        run: |
          if [ ! -n "$(gh pr list --base ${BASE_REF} --head pr/${BASE_REF}/${HEAD_REF#feature/}_${TARGET_DIR} )" ]; then
            gh pr create --base ${BASE_REF} --head pr/${BASE_REF}/${HEAD_REF#feature/}_${TARGET_DIR} --title "pr/${BASE_REF}/${HEAD_REF#feature/}_${TARGET_DIR} -> ${BASE_REF}" --body ""
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GH_ACTION_TOKEN }}


  # revert:
  #   runs-on: ubuntu-latest
  #   needs: apply
  #   if: ${{ failure() }}
  #   steps:
  #     - uses: actions/checkout@v3
  #       with:
  #         fetch-depth: 0
  #     - run: |
  #         git config --local user.email "action@github.com"
  #         git config --local user.name "GitHub Action"
  #         git revert ${{ github.sha }} -m 1
  #         git push origin ${{ github.base_ref }}
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GH_ACTION_TOKEN }}
  #         GITHUB_CONTEXT: ${{ toJson(github) }}